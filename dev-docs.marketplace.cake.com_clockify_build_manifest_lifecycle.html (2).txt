cakKe.com/| developers Q Developer portal More resources

Menu ON THIS PAGE >

Clockify Add-on Quick Start Guide

Developer account

Before starting our development process, we will need to create a CAKE.com developer account. A developer
account will allow us to publish, manage and monetize our add-ons as well as provide us with a testing
environment and workspace where the add-on can be installed and tested during development. You can learn

more about how to get started with the developer account

Let's get started with developing a simple add-on.
In this guide we'll build a new add-on from scratch and go through the development steps one by one, but first
we have to define what an add-on is.

Add-ons are software components that can be used to extend the functionalities of CAKE.com products. They
are technology-agnostic, meaning they can be developed using the languages and frameworks of your choice.

For this guide we will be writing our add-on in Java, using the CAKE.com and

Defining our add-on and its scope

Before starting our development process, we'll need to define how our add-on will look like and what it aims to

achieve.

For this guide, we will create a simple add-on which will add a new page to the Clockify's sidebar and will display
a statistic of the time tracked by the current user. As part of the guide we will implement and host a backend

service and also integrate our add-on into Clockify's Ul.

Setting up a new project

We'll start our development flow by creating a new project for our add-on. Let's call it “Time Reports”.

1. We'll create our first file named TimeReportsAddon.java, containing the following code:

package com.cake.marketplace.examples.timereports;
public class TimeReportsAddon {

public static void main(String[] args) {

bs

2. We'll need to set up our Maven dependencies. This step consists of three parts:

Configure and authenticate Github with maven as described in the following

Configure our package repository in the pom.xml file by adding the following snippet:

<repositories>
<repository>
<id>github</id>
<url>https://maven.pkg.github.com/clockify/addon-java-sdk</url>
</repository>
</repositories>

Configure our package dependency in the pom.xml file by adding the following snippet:

<dependencies>
<dependency>
<groupId>com.cake.clockify</groupId>
<artifactId>addon-sdk</artifactId>
<version>1.4.0</version>
</dependency>
</dependencies>

Building our manifest

Now that we have successfully set up our project and dependencies we can start working on the add-on itself.

First, let's briefly explain what a manifest is.

A manifest is a file which describes an add-on and its functionalities. Through the manifest you can define how

your add-on integrates with CAKE.com products.

The format of the manifest file depends on the CAKE.com product your add-on is targeting, but in general will
contain information about the add-on such as its identifier, name, permission scopes and other definitions that
describe how it will interact with the product. You can read more about the manifest, its syntax and various

options on the section of the documentation.

The Addon SDK provides a simple way to build and host our manifest file dynamically. Let's start by defining the

manifest object, and then we'll go over the details.

Our main() method will look like this:

public static void main(String[] args) throws Exception {
var manifest = ClockifyManifest.vl_3Builder()

.key("time-reports—-example")
.name ("Time Reports")
.baseUr1("")
.requireFreePlan()
.description ("Example add-on that displays time statistics")
.scopes(List.of(ClockifyScope.TIME_ENTRY_READ))
Lbuild();

Let's go over the lines step by step.
Builder interface

We'll start by using the builder interface to guide us through the steps needed to construct our manifest. The
manifest builder interface exposes one method for each supported schema version. In this guide we will use

version 1.3 of the manifest schema.
* Key

The add-on key acts as an identifier for our add-on and must be a unique value among all add-ons published on

the CAKE.com marketplace.
e Name

The add-on name is also a required field and must match the name under which the add-on gets published to

the CAKE.com marketplace. In the Ul, the name will be displayed on Clockify's add-on settings tab.
e Base URL

The base URL is the URL that will act as the base location for our add-on. Other paths will be defined relative to
this URL. We're setting it to an empty value at this point as we do not yet have a publicly available URL we can

use.
» Subscription plan

The minimal subscription plan is the minimum plan that Clockify workspaces must have in order to be able to
install and use our add-on. The requireFreePlan() method is a helper which sets the minimum required plan

value to ‘FREE’ Other supported values for the plan can be found on the manifest section.
* Description

The description field is an optional field, and can be populated with a short description of the add-on. The text

will be visible on Clockify's add-on settings tab.
e Scopes

Scopes are optional, but have to be defined if we intend to use certain features of the Clockify API. For our
example we need to request the TIME_ENTRY_READ scope since we will be making requests to the time entries

endpoint.

Building our Ul component

Now that we've built the manifest object, the next step will be to define and serve our Ul component. Let's start

by defining our component first, and then we'll get to the HTML part of the Ul.

var uiComponent = ClockifyComponent.builder()
.sidebar()
.allowEveryone()
.path("/sidebar-component")
.label("Time Reports")
.build();

In this guide we will be defining a single Ul component which will be shown as a separate entry on the sidebar.
» Builder

Similar to the manifest, we will use a builder interface to construct our component.

» Location

Specifies where the entry point where our component will be located. We've chosen the sidebar location for this
example, but there is a wide range of options that can be chosen depending on your use case. For more

information on the location field, visit the manifest’'s components section.
e Access

Specifies the type of permission the user must have in order to access our component. Supported values are
admins, or everyone. We will be showing our add-on to every user of the workspace. For more information on the

access field, visit the manifest's components section.
* Path

The path is a value relative to the base URL defined in the manifest. A GET request will be made to this location

every time the Ul component is loaded in Ul.

Ul components are loaded inside iframes and will always be supplied with an authentication token query
parameter, named as auth_token . This token can be used to identify and authenticate the user who is viewing

our component. For more information on the component's authentication, visit the section.
eo Label

The label is a text field whose value will be shown on the component's defined location - the sidebar in our case.

You can read more about the label under the manifest's components section.

Building our Ul

To build our Ul we will use the CAKE.com . Let's start by creating an empty sidebar-
component.html file under our resources folder.

* Import dependencies

Let's add the required imports for the Add-on Ul kit. For the purpose of this guide we will also be importing the

library which will be used to process time values.

<html>
<head>
<link
rel=" =
href=" =
/>
<script src=" "></scr
<script src=" "></script>
</head>
</html>

* Define Ul elements

Now that we've imported the Ul kit, our next step is to create a body tag and then define our Ul elements.

<body>

<div class="
<div class="
<div class=" " data-tab=" ">Time Reports</div>
</div>

<div class="

<div class= >

<p>Your total tracked time is: <span id=" "></span></p>
</div>
</div>
</div>

</body>

» Retrieving and decoding the authentication token

Our next goal will be to retrieve our time entries data through Clockify’s API and present a simple overview of the

total time tracked. The first thing that we need to do is to create a script section at the end of our file.

<script>

</script>

Next, we'll retrieve the authentication token that Clockify provides to our and use that token to make

a call to the

const token = new URLSearchParams (window. location.search).get('auth_token');

Clockify's add-ons can be installed on a wide range of environments, be it on a regional instance or even on

development test workspaces.

To ensure that add-ons can work independent of the environment where they are installed, we have to retrieve
all the environment-related information from the authentication token - which is in fact a . You can learn

more about the claims present in the JWT token on the following
For our component, we're mostly interested in the following three claims:

* backendUrl - the URL of the backend (environment) where our API calls will be made
« workspaceld - the ID of the workspace where our add-on was installed

o user - the ID of the user that is currently viewing our component

It should be noted that each authentication token that is supplied to the iframe only references a specific add-

on install on a single workspace.

This example will bypass the verification step and only retrieve the claims from the token, but it's strongly

recommended that production add-ons perform the proper validations before accepting the token as valid.

The JWT is signed with RSA256. The public key used to verify the token can be accessed on the following

const tokenPayload = .parse(atob(token.split('."')[1]));
const backendUrl = tokenPayload['backendUrl']

const workspaceId = tokenPayload['workspaceId']

const userId = tokenPayload['user']

« Interacting with the API
Now, it's time to make the API call.

While Clockify provides endpoints for generating reports, to keep it simple we're going to call the time entries

endpoint which can be found

Note that we're using the values we retrieved from the claims to construct the endpoint we're calling.

const oneWeekAgo = dateFns.subWeeks (new Date(), 1)

fetch (" ${backendUrl}/vl/workspaces/${workspaceId}/user/${userId}/time-entries?’ + new URL
headers: {"x-addon-token": token}, method: "GET"
+
).then(response => {
if (response.status !== 200) {
console. log ("Received status " + response.status)
return

let totalDurationSeconds = 0;

response. json().forEach(entry => {
const start = entry["timeInterval®]["start"]
const end = entry["timeInterval"]["end"]

const durationSeconds = dateFns.differenceInSeconds(dateFns.parseIS0(end), da
totalDurationSeconds += durationSeconds;

17

const element = document.getElementById("tracked-time");

if (totalDurationSeconds !== 0) {
const duration = dateFns.intervalToDuration({ start: @, end: totalDurationSec
element. textContent = dateFns.formatDuration(duration);

} else {

CT omrmmimd md ommdmmd  Mpmm Atm mmm mA
